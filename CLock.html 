<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Clock</title>
  <style>
    :root {
      --text-color: #00ffcc;
      --shadow-color: #00ff99;
      --bg-color: #111;
      --glass-blur: blur(15px);
      --font-family: 'Orbitron', sans-serif;
    }

    html, body {
      margin: 0; padding: 0; height: 100%;
      font-family: var(--font-family);
      background: var(--bg-color);
      color: var(--text-color);
      transition: background 0.4s, color 0.4s;
      overflow: hidden;
    }

    #app {
      height: 100%;
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      backdrop-filter: var(--glass-blur);
      background: rgba(0, 0, 0, 0.6);
      padding: 30px;
      box-sizing: border-box;
      text-align: center;
    }

    #clock {
      font-size: 8vw;
      text-shadow: 0 0 25px var(--shadow-color);
      display: flex;
      align-items: baseline;
      justify-content: center;
      gap: 10px;
    }

    #mainTime {
      flex-shrink: 0;
    }

    #ampm {
      font-size: 0.8vw;
      opacity: 0.8;
      text-transform: uppercase;
    }

    #settingsBtn {
      position: absolute;
      top: 15px;
      right: 20px;
      font-size: 2rem;
      cursor: pointer;
      user-select: none;
    }

    #settingsPanel {
      position: absolute;
      top: 60px;
      right: 20px;
      background: rgba(255,255,255,0.1);
      border: 1px solid #aaa;
      backdrop-filter: blur(15px);
      padding: 15px;
      border-radius: 10px;
      display: none;
      z-index: 99;
      width: 280px;
      text-align: left;
    }

    .setting-group {
      margin-bottom: 12px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-size: 0.9rem;
    }

    input[type="color"],
    input[type="text"],
    input[type="range"] {
      width: 100%;
      padding: 5px;
      font-size: 0.9rem;
      box-sizing: border-box;
    }

    input[type="checkbox"] {
      transform: scale(1.3);
      margin-right: 6px;
    }

    body.light-mode {
      --bg-color: #f2f2f2;
      --text-color: #111;
      --shadow-color: #005500;
    }

    body.light-mode #app {
      background: rgba(255 255 255 / 0.7);
    }

    body.light-mode #settingsPanel {
      background: rgba(255 255 255 / 0.95);
      border-color: #444;
      color: #111;
    }
  </style>
</head>
<body>
<div id="app">
  <div id="settingsBtn" title="Settings">âš™</div>

  <div id="settingsPanel">
    <div class="setting-group">
      <label for="bgColor">Background Color:</label>
      <input type="color" id="bgColor" />
    </div>

    <div class="setting-group">
      <label for="textColor">Text Color:</label>
      <input type="color" id="textColor" />
    </div>

    <div class="setting-group">
      <label for="clockColor">Clock Shadow Color:</label>
      <input type="color" id="clockColor" />
    </div>

    <div class="setting-group">
      <label for="fontFamily">Font Family (Google Fonts):</label>
      <input type="text" id="fontFamily" placeholder="e.g. Orbitron" />
    </div>

    <div class="setting-group">
      <label for="clockSize">Clock Size </label>
      <input type="range" id="clockSize" min="5" max="50" value="8" />
    </div>

    <div class="setting-group">
      <label><input type="checkbox" id="showSeconds" checked /> Show Seconds</label>
    </div>

    <div class="setting-group">
      <label><input type="checkbox" id="format12h" /> 12-Hour Format</label>
    </div>

    <div class="setting-group">
      <label><input type="checkbox" id="darkModeToggle" /> Dark Mode</label>
    </div>
  </div>

  <div id="clock">
    <span id="mainTime">00:00:00</span>
    <span id="ampm"></span>
  </div>
</div>

<script>
  const clock = document.getElementById('clock');
  const settingsBtn = document.getElementById('settingsBtn');
  const settingsPanel = document.getElementById('settingsPanel');
  const bgColor = document.getElementById('bgColor');
  const textColor = document.getElementById('textColor');
  const clockColor = document.getElementById('clockColor');
  const fontFamily = document.getElementById('fontFamily');
  const clockSize = document.getElementById('clockSize');
  const darkModeToggle = document.getElementById('darkModeToggle');
  const showSeconds = document.getElementById('showSeconds');
  const format12h = document.getElementById('format12h');
  const mainTime = document.getElementById('mainTime');
  const ampm = document.getElementById('ampm');

  let fontLinkTag = null;

  function updateTime() {
    const now = new Date();
    const showSec = showSeconds.checked;
    const is12h = format12h.checked;

    let hours = now.getHours();
    let minutes = now.getMinutes();
    let seconds = now.getSeconds();
    let ampmText = '';

    if (is12h) {
      ampmText = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours === 0 ? 12 : hours;
    }

    const h = String(hours).padStart(2, '0');
    const m = String(minutes).padStart(2, '0');
    const s = String(seconds).padStart(2, '0');

    const timeStr = showSec ? `${h}:${m}:${s}` : `${h}:${m}`;

    mainTime.textContent = timeStr;
    ampm.textContent = is12h ? ampmText : '';
  }

  setInterval(updateTime, 1000);
  updateTime();

  settingsBtn.onclick = () => {
    settingsPanel.style.display = (settingsPanel.style.display === 'block') ? 'none' : 'block';
  };

  function loadFont(font) {
    if (!font) {
      if (fontLinkTag) {
        fontLinkTag.remove();
        fontLinkTag = null;
      }
      document.documentElement.style.setProperty('--font-family', `'Orbitron', sans-serif`);
      return;
    }
    const formattedFont = font.trim().replace(/ /g, '+');
    const url = `https://fonts.googleapis.com/css2?family=${formattedFont}&display=swap`;

    if (fontLinkTag) fontLinkTag.remove();

    fontLinkTag = document.createElement('link');
    fontLinkTag.rel = 'stylesheet';
    fontLinkTag.href = url;
    document.head.appendChild(fontLinkTag);

    document.documentElement.style.setProperty('--font-family', `'${font.trim()}', sans-serif`);
  }

  function savePrefs() {
    localStorage.setItem('liveClockPrefs', JSON.stringify({
      bgColor: bgColor.value,
      textColor: textColor.value,
      clockColor: clockColor.value,
      fontFamily: fontFamily.value,
      clockSize: clockSize.value,
      darkMode: darkModeToggle.checked,
      showSeconds: showSeconds.checked,
      format12h: format12h.checked
    }));
  }

  function loadPrefs() {
    const prefs = JSON.parse(localStorage.getItem('liveClockPrefs'));
    if (!prefs) return;

    bgColor.value = prefs.bgColor || '#111111';
    textColor.value = prefs.textColor || '#00ffcc';
    clockColor.value = prefs.clockColor || '#00ff99';
    fontFamily.value = prefs.fontFamily || '';
    clockSize.value = prefs.clockSize || 8;
    darkModeToggle.checked = prefs.darkMode || false;
    showSeconds.checked = prefs.showSeconds !== false;
    format12h.checked = prefs.format12h || false;

    applyPrefs();
  }

  function applyPrefs() {
    document.body.style.background = bgColor.value;
    document.body.style.color = textColor.value;
    clock.style.textShadow = `0 0 25px ${clockColor.value}`;
    clock.style.fontSize = `${clockSize.value}vw`;
    ampm.style.fontSize = `${(clockSize.value * 0.1)}vw`;

    if (darkModeToggle.checked) {
      document.body.classList.add('dark-mode');
      document.body.classList.remove('light-mode');
    } else {
      document.body.classList.add('light-mode');
      document.body.classList.remove('dark-mode');
    }

    loadFont(fontFamily.value);
    updateTime();
  }

  [
    bgColor,
    textColor,
    clockColor,
    fontFamily,
    clockSize,
    darkModeToggle,
    showSeconds,
    format12h
  ].forEach(el => el.addEventListener('input', () => {
    applyPrefs();
    savePrefs();
  }));

  loadPrefs();
</script>
</body>
</html>

